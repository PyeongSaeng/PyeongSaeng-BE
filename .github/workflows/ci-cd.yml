name: Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - dev
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  CONTAINER_NAME: pyeongsaeng-prod-container
  DOCKER_HUB_TOKEN : ${{ secrets.DOCKER_HUB_TOKEN }}
  DOCKER_USERNAME : ${{ secrets.DOCKER_USERNAME }}
  EC2_URL : ${{ secrets.EC2_URL }}
  EC2_USERNAME : ubuntu
  EC2_SSH_PRIVATE_KEY : ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  EC2_PORT : 22
  DB_URL : ${{ secrets.DB_URL }}
  DB_USERNAME : ${{ secrets.DB_USERNAME }}
  DB_PASSWORD : ${{ secrets.DB_PASSWORD }}
  S3_BUCKET_NAME : ${{ secrets.S3_BUCKET_NAME }}
  S3_IAM_ACCESS_KEY : ${{ secrets.S3_IAM_ACCESS_KEY }}
  S3_IAM_SECRET_KEY : ${{ secrets.S3_IAM_SECRET_KEY }}
  S3_REGION : ${{ secrets.S3_REGION }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  GOOGLE_GEO_API_KEY: ${{secrets.GOOGLE_GEO_API_KEY}}
  GOOGLE_MAPS_API_KEY: ${{secrets.GOOGLE_MAPS_API_KEY}}
  SMS_API_KEY: ${{ secrets.SMS_API_KEY }}
  SMS_SECRET_KEY: ${{ secrets.SMS_SECRET_KEY }}
  SMS_FROM_NUMBER: ${{ secrets.SMS_FROM_NUMBER }}
  ES_HOST : ${{secrets.ES_HOST}}
  ES_PASSWORD : ${{secrets.ES_PASSWORD}}


jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub
        run: echo "${{ env.DOCKER_HUB_TOKEN }}" | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_URL }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_PRIVATE_KEY }}
          port: ${{ env.EC2_PORT }}
          script: |
            TIMESTAMP=$(date +"%Y%m%d%H%M%S")
            NEW_CONTAINER_NAME="${{ env.CONTAINER_NAME }}-$TIMESTAMP"

            echo "Pulling latest image: ${{ env.DOCKER_IMAGE_NAME }}"
            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest

            # Check for running container on port 8080
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080")

            # Stop the running container if it exists
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping existing container: $CONTAINER_ID"
              sudo docker stop $CONTAINER_ID
            fi

            echo "Starting new container..."
            sudo docker run --name $NEW_CONTAINER_NAME -d -p 8080:8080 \
              -e "SPRING_PROFILES_ACTIVE=prod" \
              -e "DB_URL=${{ env.DB_URL }}" \
              -e "DB_USERNAME=${{ env.DB_USERNAME }}" \
              -e "DB_PASSWORD=${{ env.DB_PASSWORD }}" \
              -e "S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}" \
              -e "S3_IAM_ACCESS_KEY=${{ env.S3_IAM_ACCESS_KEY }}" \
              -e "S3_IAM_SECRET_KEY=${{ env.S3_IAM_SECRET_KEY }}" \
              -e "S3_REGION=${{ env.S3_REGION }}" \
              -e "JWT_SECRET=${{ env.JWT_SECRET }}" \
              -e "KAKAO_CLIENT_ID=${{ env.KAKAO_CLIENT_ID }}" \
              -e "GOOGLE_MAPS_API_KEY=${{ env.GOOGLE_MAPS_API_KEY }}" \
              -e "GOOGLE_GEO_API_KEY=${{ env.GOOGLE_GEO_API_KEY }}" \
              -e "SMS_API_KEY=${{ env.SMS_API_KEY }}" \
              -e "SMS_SECRET_KEY=${{ env.SMS_SECRET_KEY }}" \
              -e "SMS_FROM_NUMBER=${{ env.SMS_FROM_NUMBER }}" \
              -e "ES_HOST=${{ env.ES_HOST  }}" \
              -e "ES_PASSWORD=${{ env.ES_PASSWORD }}" \
              -e TZ=Asia/Seoul \
              ${{ env.DOCKER_IMAGE_NAME }}:latest

            # Perform health check
            echo "Performing health check on the new container..."
            HEALTH_CHECK_URL="http://127.0.0.1:8080/actuator/health"
            for i in {1..10}; do
              HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
              if [ "$HEALTH_STATUS" == "200" ]; then
                echo "Health check passed. New container is healthy."
                # Remove old container and image
                if [ ! -z "$CONTAINER_ID" ]; then
                  echo "Removing old container: $CONTAINER_ID"
                  sudo docker rm $CONTAINER_ID
                fi
                IMAGE_ID=$(sudo docker images -q ${{ env.DOCKER_IMAGE_NAME }})
                if [ ! -z "$IMAGE_ID" ]; then
                  echo "Removing old image: $IMAGE_ID"
                  sudo docker rmi $IMAGE_ID
                fi
                exit 0
              fi
              echo "Health check failed. Retrying in 5 seconds... ($i/10)"
              sleep 10
            done

            # If health check failed
            if [ "$HEALTH_STATUS" != "200" ]; then
              echo "Health check failed after multiple attempts. Restarting old container."
              sudo docker stop $NEW_CONTAINER_NAME
              sudo docker rm $NEW_CONTAINER_NAME
              if [ ! -z "$CONTAINER_ID" ]; then
                echo "Restarting old container: $CONTAINER_ID"
                sudo docker start $CONTAINER_ID
              fi
              LATEST_IMAGE_ID=$(sudo docker images ${{ env.DOCKER_IMAGE_NAME }}:latest -q)
              if [ ! -z "$LATEST_IMAGE_ID" ]; then
                echo "Removing latest image: $LATEST_IMAGE_ID"
                sudo docker rmi $LATEST_IMAGE_ID
              fi
              exit 1
            fi
